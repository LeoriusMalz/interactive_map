// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
// 55.925780, 37.514727
// 55.935356, 37.523696

// NW - 55.934342, 37.514862
// SW - 55.926050, 37.514807
// NE - 55.934337, 37.526694

let rotationAngle = 0; // –¢–µ–∫—É—â–∏–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞
// let rotatedImage; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è rotated overlay

const markerElements = [];                                                                                                  // –ú–∞—Å—Å–∏–≤ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

function addMarker(coords, name, desc, category) {
    switch (category) {
        case "–∫–æ—Ñ–µ–π–Ω—è": htmlAlt = '<div class="rotating-marker" style="text-shadow: 0 0 10px rgba(0,0,0,0.2);">‚òï</div>'; break;
        case "—Å—Ç–æ–ª–æ–≤–∞—è": htmlAlt = '<div class="rotating-marker" style="text-shadow: 0 0 10px rgba(0,0,0,0.2);">üçΩÔ∏è</div>'; break;
        case "–∫–æ—Ä–ø—É—Å": htmlAlt = name; break;
        default: htmlAlt = 'üìå';
    }

    const markerElement = L.marker(coords, {                                                              // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        icon: L.divIcon({                                                                                                   // –ò–∫–æ–Ω–∫–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞
            className: `marker-${category}`,
            html: htmlAlt,
            iconSize: [30, 30]
        }),
        zIndexOffset: 100,
        draggable: true
    }).addTo(map);

    markerElement.bindPopup(`<b>${name}</b><br>${desc}<br>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}`);                                      // –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Ä–∫–µ—Ä–µ
    markerElements.push({                                                                                                   // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –≤ –º–∞—Å—Å–∏–≤
        element: markerElement,
        name: name.toLowerCase(),
        category: category,
        coords: coords
    });
}

function rotatePoint(lat, lng, centerLat, centerLng, angle) {
    const radians = angle * Math.PI / 180;
    const R = 6378137; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    
    // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –º–µ—Ç—Ä–∞—Ö
    const dLat = (lat - centerLat) * Math.PI / 180 * R;
    const dLng = (lng - centerLng) * Math.PI / 180 * R * Math.cos(centerLat * Math.PI / 180);
    
    // –ü–æ–≤–æ—Ä–æ—Ç
    const newDLat = dLat * Math.cos(radians) - dLng * Math.sin(radians);
    const newDLng = dLat * Math.sin(radians) + dLng * Math.cos(radians);
    
    // –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    const newLat = centerLat + (newDLat / R) * 180 / Math.PI;
    const newLng = centerLng + (newDLng / (R * Math.cos(centerLat * Math.PI / 180))) * 180 / Math.PI;
    
    return [newLat, newLng];
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–∞—Ä—Ç—ã
function rotateMap(angle) {
    rotationAngle = angle;

    if (angle == 0) {
        rotatedImage.reposition(rotatePoint(northWest[0], northWest[1], initPoint[0], initPoint[1], -15), 
            rotatePoint(northEast[0], northEast[1], initPoint[0], initPoint[1], -15), 
            rotatePoint(southWest[0], southWest[1], initPoint[0], initPoint[1], -15));
        map.setView(initPoint);

        markerElements.forEach(markerElement => {
            marker = markerElement;

            marker.element.setLatLng(marker.coords);
        });

        return;
    }

    let center = map.getCenter();
    newSouthWest = rotatePoint(southWest[0], southWest[1], center.lat, center.lng, angle-15);
    newNorthEast = rotatePoint(northEast[0], northEast[1], center.lat, center.lng, angle-15);
    newNorthWest = rotatePoint(northWest[0], northWest[1], center.lat, center.lng, angle-15);

    rotatedImage.reposition(newNorthWest, newNorthEast, newSouthWest);

    markerElements.forEach(markerElement => {
        marker = markerElement;

        marker.element.setLatLng(rotatePoint(marker.coords[0], marker.coords[1], center.lat, center.lng, angle));
    });

    // userMarker.setLatLng(rotatePoint(userCoords[0], userCoords[1], center.lat, center.lng, angle));

    // –û–±–Ω–æ–≤–ª—è–µ–º —É–≥–æ–ª –º–∞—Ä–∫–µ—Ä–æ–≤ (–ø—Ä–∏–º–µ—Ä –¥–ª—è userMarker)
    // if (userMarker) {
    //     userMarker.setRotationAngle(angle);
    // }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã


// const southWest = [55.925780, 37.523696]; 
// const northEast = [55.935356, 37.514727];

// var southWest = [55.925780, 37.514727];
// var northEast = [55.935356, 37.523696];
// var northWest = [55.935356, 37.514727];

var southWest = [55.926050, 37.514807];
var northEast = [55.934337, 37.526694];
var northWest = [55.934342, 37.514862];

// var southWest = [55.925630, 37.514807];
// var northEast = [55.934787, 37.526694];
// var northWest = [55.934792, 37.514862];

const initPoint = [(Math.max(northEast[0], northWest[0])+southWest[0])/2, (Math.min(southWest[1], northWest[1])+northEast[1])/2];

const nwDiag = Math.sqrt((northWest[0]-initPoint[0])*(northWest[0]-initPoint[0]) + (northWest[1]-initPoint[1])*(northWest[1]-initPoint[1]));
const swDiag = Math.sqrt((southWest[0]-initPoint[0])*(southWest[0]-initPoint[0]) + (southWest[1]-initPoint[1])*(southWest[1]-initPoint[1]));
const neDiag = Math.sqrt((northEast[0]-initPoint[0])*(northEast[0]-initPoint[0]) + (northEast[1]-initPoint[1])*(northEast[1]-initPoint[1]));

const map = L.map('map', 
                    {minZoom: 16, 
                    maxZoom: 19.5
                    // maxBounds: [[55.927713, 37.516206],
                    //             [55.930662, 37.523304]]
                    }
                ).setView(initPoint, 17.2);                                            // –ù–∞—á–∞–ª—å–Ω—ã–π –≤–∏–¥

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã
const imageUrl = 'static/data/map 2.png';                                                                                                // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∫–∞—Ä—Ç—ã
const imageBounds = [southWest, northEast];                                                       // –ì—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã
// L.imageOverlay(imageUrl, imageBounds).addTo(map);

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ü–û–í–û–†–ê–ß–ò–í–ê–ï–ú–û–ì–û –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL)
var rotatedImage = L.imageOverlay.rotated(
    imageUrl,
    rotatePoint(northWest[0], northWest[1], initPoint[0], initPoint[1], -15), // –Æ–≥–æ-–≤–æ—Å—Ç–æ–∫
    rotatePoint(northEast[0], northEast[1], initPoint[0], initPoint[1], -15),
    rotatePoint(southWest[0], southWest[1], initPoint[0], initPoint[1], -15)
).addTo(map);

// var rotatedImage2 = L.imageOverlay.rotated(
//     'map.jpg',
//     northWest, // –Æ–≥–æ-–≤–æ—Å—Ç–æ–∫
//     northEast,
//     southWest,
//     {opacity: 0.5}
// ).addTo(map);

// ------------------------------------------| –ö–û–ú–ü–ê–° |--------------------------------------------

// const compass = document.getElementById('compass-ring');
// const compassDegrees = document.getElementById('compass-degrees');
// let isDragging = false;
// let startAngle = 0;
// let currentRotation = 0;

// // –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –∫–æ–º–ø–∞—Å–∞
// const compassRect = compass.getBoundingClientRect();
// const centerX = compassRect.left + compassRect.width / 2;
// const centerY = compassRect.top + compassRect.height / 2;
// startAngle = 0;

// // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
// compass.addEventListener('mousedown', (e) => {
//     isDragging = true;
//     // console.log(Math.atan2(
//     //     e.clientY - centerY,
//     //     e.clientX - centerX
//     // ) * 180 / Math.PI);
//     // startAngle = angle + Math.atan2(
//     //     e.clientY - centerY,
//     //     e.clientX - centerX
//     // ) * 180 / Math.PI;
//     compass.style.cursor = 'grabbing';
// });

// compassDegrees.addEventListener('mousedown', (e) => {
//     updateCompass(0);
// });

// document.addEventListener('mousemove', (e) => {
//     if (!isDragging) return;
    
//     const angle = Math.atan2(
//         e.clientY - centerY,
//         e.clientX - centerX
//     ) * 180 / Math.PI;
    
//     currentRotation = angle - startAngle + 90;
//     updateCompass(currentRotation);
// });

// document.addEventListener('mouseup', () => {
//     isDragging = false;
//     compass.style.cursor = 'grab';
// });

// // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞—Å–∞ –∏ –∫–∞—Ä—Ç—ã
// function updateCompass(degrees) {
//     // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–æ–ª (0-360)
//     degrees = (degrees % 360 + 360) % 360;
    
//     // –í—Ä–∞—â–∞–µ–º –∫–æ–ª—å—Ü–æ
//     compass.style.transform = `rotate(${(degrees)%360}deg)`;
//     compassDegrees.textContent = `${(Math.round(degrees))%360}¬∞`;
    
//     // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é rotateMap)
//     rotateMap(degrees);
// };

// ------------------------------------------| –ö–û–ù–ï–¶ –ö–û–ú–ü–ê–°–ê |--------------------------------------------


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
// document.getElementById('rotate-left').addEventListener('click', () => {
//     rotateMap(-15);
// });

// document.getElementById('rotate-right').addEventListener('click', () => {
//     rotateMap(15);
// });

// document.getElementById('reset-rotation').addEventListener('click', () => {
//     rotateMap(0);
// });


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
// let imageOverlay;

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü
// function updateMapBounds() {
//     const south = parseFloat(document.getElementById('south-slider').value);
//     const north = parseFloat(document.getElementById('north-slider').value);
//     const west = parseFloat(document.getElementById('west-slider').value);
//     const east = parseFloat(document.getElementById('east-slider').value);
    
//     newBounds = [
//         rotatePoint(north, west, initPoint[0], initPoint[1], 15),
//         rotatePoint(north, east, initPoint[0], initPoint[1], 15),
//         rotatePoint(south, west, initPoint[0], initPoint[1], 15)
//     ];
    
//     // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º imageOverlay
//     if (imageOverlay) {
//         imageOverlay.reposition(newBounds[0], newBounds[1], newBounds[2]);
//         // imageOverlay.setBounds([newBounds[2], newBounds[1]]);
//     } else {
//         imageOverlay = L.imageOverlay.rotated(
//             'static/data/map 2.png',
//             newBounds[0], // –Æ–≥–æ-–≤–æ—Å—Ç–æ–∫
//             newBounds[1],
//             newBounds[2]
//         ).addTo(map);
//         // imageOverlay = L.imageOverlay('static/data/map 2.png', newBounds).addTo(map);
//     }
    
//     // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
//     document.getElementById('south-value').textContent = newBounds[2][0].toFixed(6);
//     document.getElementById('north-value').textContent = newBounds[1][0].toFixed(6);
//     document.getElementById('west-value').textContent = newBounds[2][1].toFixed(6);
//     document.getElementById('east-value').textContent = newBounds[1][1].toFixed(6);
// }

// –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–∑—É–Ω–∫–æ–≤
// document.querySelectorAll('input[type="range"]').forEach(slider => {
//     slider.addEventListener('input', updateMapBounds);
// });

// // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
// updateMapBounds();


map.attributionControl.setPrefix('<a href="http://t.me/leoriusmalz">LeoriusMalz</a> ¬© 2025');                               // –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫


// –ú–∞—Ä–∫–µ—Ä—ã
const markers = [
    { coords: [55.929643, 37.520252], name: "–ö–æ—Ñ–µ–π–Ω—è", desc: "–ù–ö, 2 —ç—Ç–∞–∂", category: "–∫–æ—Ñ–µ–π–Ω—è" },
    { coords: [55.929589, 37.520536], name: "–ö–æ—Ñ–µ–π–Ω—è-–±—É—Ñ–µ—Ç", desc: "–ù–ö, 2 —ç—Ç–∞–∂", category: "—Å—Ç–æ–ª–æ–≤–∞—è" },
    { coords: [55.928981, 37.521500], name: "–°—Ç–æ–ª–æ–≤–∞—è", desc: "–ö–ü–ú, 2 —ç—Ç–∞–∂", category: "—Å—Ç–æ–ª–æ–≤–∞—è" },
    { coords: [55.929043, 37.518316], name: "–ö–∞—Ñ–µ ¬´–¢–µ–æ—Ä–∏—è¬ª", desc: "–¶–∏—Ñ—Ä–∞, -1 —ç—Ç–∞–∂", category: "—Å—Ç–æ–ª–æ–≤–∞—è" },
    { coords: [55.929001, 37.517782], name: "–ö–æ—Ñ–µ–π–Ω—è", desc: "–¶–∏—Ñ—Ä–∞, 2 —ç—Ç–∞–∂", category: "–∫–æ—Ñ–µ–π–Ω—è" },
    { coords: [55.929508, 37.519114], name: "–ë—É—Ñ–µ—Ç", desc: "–ì–ö, 2 —ç—Ç–∞–∂", category: "—Å—Ç–æ–ª–æ–≤–∞—è" },
    { coords: [55.929253, 37.517461], name: "–ö–æ—Ñ–µ–π–Ω—è –î–∞–±–ª–±–∏", desc: "–ì–ö, 2 —ç—Ç–∞–∂", category: "–∫–æ—Ñ–µ–π–Ω—è" },

    { coords: [55.929419, 37.518245], name: "–ì–ö", desc: "–ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å", category: "–∫–æ—Ä–ø—É—Å" },
    { coords: [55.929102, 37.518539], name: "–£–õ–ö-1", desc: "–§–∏–∑—Ç–µ—Ö.–¶–∏—Ñ—Ä–∞", category: "–∫–æ—Ä–ø—É—Å" },
    { coords: [55.928326, 37.518115], name: "–£–õ–ö-2", desc: "–§–∏–∑—Ç–µ—Ö.–ê—Ä–∫—Ç–∏–∫–∞", category: "–∫–æ—Ä–ø—É—Å" },
    { coords: [55.930185, 37.518224], name: "–õ–ö", desc: "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–π –∫–æ—Ä–ø—É—Å", category: "–∫–æ—Ä–ø—É—Å" },
    { coords: [55.929870, 37.516212], name: "–†–¢–ö", desc: "–†–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–ø—É—Å", category: "–∫–æ—Ä–ø—É—Å" },
    { coords: [55.929707, 37.515773], name: "–ë–§–ö", desc: "–§–∏–∑—Ç–µ—Ö.–ë–∏–æ / –ë–∏–æ—Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–ø—É—Å", category: "–∫–æ—Ä–ø—É—Å" },
    { coords: [55.929183, 37.520619], name: "–ù–ö", desc: "–§–∏–∑—Ç–µ—Ö.–ö–≤–∞–Ω—Ç / –ù–æ–≤—ã–π –∫–æ—Ä–ø—É—Å / –ö–æ—Ä–ø—É—Å –º–∏–∫—Ä–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏", category: "–∫–æ—Ä–ø—É—Å" },
    { coords: [55.928670, 37.521619], name: "–ö–ü–ú", desc: "–ö–æ—Ä–ø—É—Å –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏", category: "–∫–æ—Ä–ø—É—Å" },
    { coords: [55.927416, 37.518266], name: "–í–£–¶", desc: "–í–æ–µ–Ω–Ω–æ-—É—á–µ–±–Ω—ã–π —Ü–µ–Ω—Ç—Ä", category: "–∫–æ—Ä–ø—É—Å" },

    // { lat: 55.929299, lng: 37.517427, name: "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫", category: "park" }
];

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É
markers.forEach(marker => {                                                                                                 // –ü—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º –º–∞—Ä–∫–µ—Ä–∞–º
    addMarker(marker.coords, marker.name, marker.desc, marker.category);
});

document.getElementById('editing-button').addEventListener('click', () => {
    const editingMenu = document.getElementById('edit-menu');

    switch (editingMenu.style.display) {
        case "none":
            editingMenu.style.display = "inline";
            markerElements.forEach(markerElement => {
                marker = markerElement.element;
                marker.dragging.enable();
            });
            break;
        default: 
            editingMenu.style.display = "none";
            markerElements.forEach(markerElement => {
                marker = markerElement.element;
                marker.dragging.disable();
            });
    }
});

const tbody = document.querySelector('#markers-table tbody');
tbody.innerHTML = '';
let ID = 0

document.getElementById('pin-create').addEventListener('click', () => {
    const pinName = document.getElementById('pin-name').value;
    const pinDesc = document.getElementById('pin-desc').value;
    const pinCategory = document.getElementById('pin-category').value;
    const coords = map.getCenter();

    addMarker(coords, pinName, pinDesc, pinCategory);
    ID += 1;

    const row = document.createElement('tr');
    row.innerHTML = `
        <td>${ID}</td>
        <td>${pinName}</td>
        <td>${pinDesc}</td>
        <td>${pinCategory}</td>
    `;

    tbody.appendChild(row);
});

document.getElementById('sidebar-button').addEventListener('mousedown', () => {
    const sidebar = document.getElementById('sidebar');

    switch (sidebar.style.display) {
        case "inline": 
            sidebar.style.display = "none"; 
            document.getElementById('sidebar-button').textContent = ">";
            break;
        default: 
            sidebar.style.display = "inline";
            document.getElementById('sidebar-button').textContent = "<";
    }
});

// –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
document.getElementById('search').addEventListener('input', (e) => {                                                        // –ß—Ç–µ–Ω–∏–µ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
    const searchTerm = e.target.value.toLowerCase();                                                                        // –í—ã–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    markerElements.forEach(marker => {                                                                                      // –ü—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º –º–∞—Ä–∫–µ—Ä–∞–º
        const isVisible = marker.name.includes(searchTerm);                                                                 // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º
        marker.element.setOpacity(isVisible ? 1 : 0);                                                                       // –ù–µ–≤–∏–¥–∏–º–æ—Å—Ç—å –¥–ª—è –Ω–µ—Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
    });
});

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
document.querySelectorAll('.category-checkbox').forEach(checkbox => {                                                       // –ü—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º —á–µ–∫–±–æ–∫—Å–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    checkbox.addEventListener('change', () => {                                                                             // –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞
        const selectedCategories = Array.from(document.querySelectorAll('.category-checkbox:checked')).map(cb => cb.value); // –°–ø–∏—Å–æ–∫ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        markerElements.forEach(marker => {                                                                                  // –ü—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º –º–∞—Ä–∫–µ—Ä–∞–º
            const isVisible = selectedCategories.includes(marker.category);                                                 // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            marker.element.setOpacity(isVisible ? 1 : 0);                                                                   // –ù–µ–≤–∏–¥–∏–º–æ—Å—Ç—å –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤ –∏–∑ –Ω–µ–≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        });
    });
});

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (—Ñ–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤)
function getDistance(lat1, lon1, lat2, lon2) {
    const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a = 
        Math.sin(dLat/2) * Math.sin(dLat/2) +
        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
        Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;                                                                                                           // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
let watchId = null; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
const locateBtn = document.getElementById('locate-btn');
userMarker = null;
userCoords = [0, 0];

locateBtn.addEventListener('click', () => {
    if (!watchId) {
        // –í–∫–ª—é—á–µ–Ω–∏–µ —Å–ª–µ–∂–µ–Ω–∏—è
        watchId = navigator.geolocation.watchPosition(
            (position) => {
                const lat = position.coords.latitude;
                const lng = position.coords.longitude;
                const distance = getDistance(
                    lat,
                    lng,
                    initPoint[0],
                    initPoint[1]
                ).toFixed(2);

                if (distance > 2) {
                    alert("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –∫–∞–º–ø—É—Å–∞!");
                    navigator.geolocation.clearWatch(watchId);
                    watchId = null;
                    return;
                }

                locateBtn.textContent = "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ";
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –º–∞—Ä–∫–µ—Ä
                if (userMarker) map.removeLayer(userMarker);

                userCoords = [lat, lng];
                // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
                userMarker = L.circleMarker([lat, lng], {
                    radius: 10,
                    fillColor: "#4285F4",
                    color: "#fff",
                    weight: 2
                }).addTo(map);

                map.setView([lat, lng]);
                updateDistance({ lat, lng });

                userMarker.bindPopup(`–í—ã –∑–¥–µ—Å—å!<br>${lat} ${lng}<br>Speed: ${(position.coords.speed || 0).toFixed(1)} km/h`).openPopup();
            },
            (error) => {
                console.error("–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", error);
            },
            { 
                enableHighAccuracy: true, // –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (GPS)
                maximumAge: 0, // –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à
                timeout: 5000 // –ú–∞–∫—Å. –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            }
        );
        if (watchId) {
            locateBtn.textContent = "üìç –ù–∞–π—Ç–∏ –º–µ–Ω—è";
        }
    } else {
        // –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–ª–µ–∂–µ–Ω–∏—è
        navigator.geolocation.clearWatch(watchId);
        watchId = null;
        locateBtn.textContent = "üìç –ù–∞–π—Ç–∏ –º–µ–Ω—è";
    }
});